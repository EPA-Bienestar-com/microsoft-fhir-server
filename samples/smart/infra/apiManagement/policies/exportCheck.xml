<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <include-fragment fragment-id="set-oid-header-from-token" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <set-body>@{
                    // Get response body for modification
                    var responseBody = context.Response.Body.As<JObject>();

                    // Save oid for easy use
                    string oid = context.Request.Headers.GetValueOrDefault("oid", "");

                    // Change basic request values
                    responseBody["request"] = context.Request.Url.ToString();
                    responseBody["requiresAccessToken"] = true;

                    // Point output urls to APIM Export data fetch endpoint
                    foreach (JToken output in (JArray)responseBody.SelectToken("output"))
                    {
                        if (output.Type == JTokenType.Object)
                        {
                            // Get orig output URL
                            var objectOutput = (JObject)output;
                            var origUri = new Uri((string)objectOutput["url"]);

                            // Check that the current user can access the container
                            if (!origUri.Segments[1].StartsWith(oid))
                            {
                                // If not, return error
                                var jsonObject = new JObject();
                                jsonObject.Add("Error", $"Unexpected oid {oid} operation in gateway vs path {origUri.LocalPath}.");
                                jsonObject.Add("StatusCode", 401);
                                return jsonObject.ToString();
                            }

                            // Change the URL to the GET Exported Data API
                            objectOutput["url"] = "https://" + context.Request.OriginalUrl.Host + context.Api.Path + "/export-output" + origUri.LocalPath;
                        }
                        else
                        {
                            // Parsing error means server error
                            var jsonObject = new JObject();
                            jsonObject.Add("Error", "Invalid response to export operation in gateway.");
                            jsonObject.Add("StatusCode", 500);
                            return jsonObject.ToString();
                        }
                    }

                    return responseBody.ToString();
                }</set-body>
            </when>
        </choose>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>